source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
View(corr)
View(corr)
submit()
submit()
submit()
submit()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
print(makeVector(7))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(18:45)
cachemean(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
#take in matrix of 'x'
m <- NULL
#this 'set' function caches x
set <- function(y) {
x <<- y
m <<- NULL
}
#this 'get' function returns cached x
get <- function() x
setmatrix <- function(solve) m <<- solve(x)
getmatrix <- function() m
#bind to the list function
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
#if cache is there and m gets assigned to the cached variable
m<-x$getmatrix()
if(!is.null(m)){
#return the cached data
return(m)
}
#if not, get the data
matrix <- x$get()
m <-solve(matrix,...)
x$setmatrix(m)
m
}
B = matrix(
c(2, 2,3,2),
nrow=2,
ncol=2)
print(B)
c=rbind(c(1, -1/4), c(-1/4, 1))
print(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
#take in matrix of 'x'
m <- NULL
#this 'set' function caches x
set <- function(y) {
x <<- y
m <<- NULL
}
#this 'get' function returns cached x
get <- function() x
setmatrix <- function(solve) m <<- solve(x)
getmatrix <- function() m
#bind to the list function
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
#if cache is there and m gets assigned to the cached variable
m<-x$getmatrix()
if(!is.null(m)){
#return the cached data
return(m)
}
#if not, get the data
matrix <- x$get()
m <-solve(matrix,...)
x$setmatrix(m)
m
}
B = matrix(
c(2, 2,3,2),
nrow=2,
ncol=2)
print(B)
c=rbind(c(1, -1/4), c(-1/4, 1))
print(c)
a <- makeCacheMatrix(c)
cacheSolve(a)
#take in matrix of 'x' and save it to cache
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
#this 'set' function caches x
set <- function(y) {
x <<- y
m <<- NULL
}
#this 'get' function returns cached x
get <- function() x
setmatrix <- function(solve) m <<- solve(x)
getmatrix <- function() m
#bind to the list function
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Return a matrix that is the inverse of 'x' using cached if it exists
cacheSolve <- function(x=matrix(), ...) {
#if cache is there and m gets assigned to the cached variable
m<-x$getmatrix()
if(!is.null(m)){
#return the cached data
return(m)
}
#if not, get the data
data<- x$get()
m <-solve(data ,...)
x$setmatrix(m)
m
}
#-------------------------
#       Sample Data
#-------------------------
c=rbind(c(1, -1/4), c(-1/4, 1))
#make cache matrix so during heavy compuatation, we can save it
a <- makeCacheMatrix(c)
#original matrix
print(c)
#inverted matrix
cacheSolve(a)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
library(caret);
library(kernlab);
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing  <- spam[-inTrain,]
dim(training)
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("quantmod")
library(quantmod)
from.dat <-as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
library(quantmod)
from.dat <-as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
ts1Train <- window(ts1,start=1,end=5)
ts1Test  <- window(ts1,start=5,end=(7-0.01))
ts1Train
library(quantmod)
from.dat <-as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen, frequency = 12)
ts1Train <- window(ts1,start=1,end=5)
ts1Test  <- window(ts1,start=5,end=(7-0.01))
ts1Train
library(quantmod)
from.dat <-as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen, frequency = 12)
ts1Train <- window(ts1,start=1,end=5)
ts1Test  <- window(ts1,start=5,end=(7-0.01))
ts1Train
data(iris)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
data(iris)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
kMeans1 <- kmeans(subset(training, select =-c(Species)), centers = 3)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width, Petal.Length, colour=clusters, data=training)
table(kMeans1$cluster, training$Species)
data(iris)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
kMeans1 <- kmeans(subset(training, select =-c(Species)), centers = 3)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width, Petal.Length, colour=clusters, data=training)
table(kMeans1$cluster, training$Species)
#build predictor
modFit <- train(clutsers ~.,data=subset(training,select=-c(Species)),method="rpart")
table(predict(modFit,training),training$Species)
data(iris)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
kMeans1 <- kmeans(subset(training, select =-c(Species)), centers = 3)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width, Petal.Length, colour=clusters, data=training)
table(kMeans1$cluster, training$Species)
#build predictor
modFit <- train(clusters ~.,data=subset(training,select=-c(Species)),method="rpart")
table(predict(modFit,training),training$Species)
---
title: "Fitness Data Prediction"
author: "Sammie Bae"
date: "December 22, 2015"
output: html_document
---
####By Sammie Bae
###Executive Summary:
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, data from belt accelerometers to predict what excercise 6 participants are doing between forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways.
Let's first load the data:
```{r}
training <-read.csv("pml-training.csv")
testing <-read.csv("pml-testing.csv")
summary(training)
summary(testing)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
data(iris);
library(ggplot2);
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE);
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret);
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE);
modFit
getTree(modFit$finalModel,k=2);
iris
data(iris);
library(ggplot2);
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE);
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret);
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE);
modFit
getTree(modFit$finalModel,k=2);
head(iris)
data(iris);
library(ggplot2);
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE);
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret);
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE);
modFit
getTree(modFit$finalModel,k=2)
head(Species)
library(ggplot2)
library(caret)
library(rpart)
#Data Source:
# "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
# "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
#training <- read.csv("pml-training.csv")
#testing <- read.csv("pml-testing.csv")
training <- read.csv("pml-training.csv", na.strings=c("NA",""),stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", na.strings=c("NA",""),stringsAsFactors = FALSE)
dim(training)
dim(testing)
inTrain<-createDataPartition(y=training$classe, p=0.6, list=FALSE)
dataTraining<-training[inTrain, ]
dataTesting <- training[-inTrain, ]
dim(dataTraining)
dim(dataTesting)
dataTraining <- dataTraining[c(-1)]
head(dataTraining)
trainingModel <- train(dataTraining$classe ~ ., data=dataTraining, method="rf")
#nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
#myTraining <- myTraining[,nzv$nzv==FALSE]
#nzv<- nearZeroVar(myTesting,saveMetrics=TRUE)
#myTesting <- myTesting[,nzv$nzv==FALSE]
library(ggplot2)
library(caret)
library(rpart)
#Data Source:
# "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
# "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
#training <- read.csv("pml-training.csv")
#testing <- read.csv("pml-testing.csv")
training <- read.csv("pml-training.csv", na.strings=c("NA",""),stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", na.strings=c("NA",""),stringsAsFactors = FALSE)
dim(training)
dim(testing)
inTrain<-createDataPartition(y=training$classe, p=0.6, list=FALSE)
dataTraining<-training[inTrain, ]
dataTesting <- training[-inTrain, ]
dim(dataTraining)
dim(dataTesting)
dataTraining <- dataTraining[c(-1)]
head(dataTraining)
trainingModel <- train(dataTraining$classe ~ ., data=dataTraining, method="rf")
#nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
#myTraining <- myTraining[,nzv$nzv==FALSE]
#nzv<- nearZeroVar(myTesting,saveMetrics=TRUE)
#myTesting <- myTesting[,nzv$nzv==FALSE]
shiny::runApp('C:/Users/Sam.E/Desktop/datasciencecoursera/Developing Data Products')
shiny::runApp('C:/Users/Sam.E/Desktop/datasciencecoursera/Developing Data Products')
shiny::runApp('C:/Users/Sam.E/Desktop/datasciencecoursera/Developing Data Products')
shiny::runApp('C:/Users/Sam.E/Desktop/datasciencecoursera/Developing Data Products')
shiny::runApp('C:/Users/Sam.E/Desktop/datasciencecoursera/Developing Data Products')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
